<중첩 클래스와 중첩 인터페이스란?>
객체 지향 프로그램에서 클래스들은 서로 긴밀한 관계를 맺고 상호작용을 한다.
어떤 클래스는 여러 클래스와 관계를 맺지만 어떤 클래스는 특정 클래스와 관계를 맺는다.

클래스가 여러 클래스와 관계를 맺는 경우에는 독립적으로 선언하는 것이 좋으나, 특정 클래스와 관계를
맺을 경우에는 관계 클래스를 클래스 내부에 선언하는 것이 좋다.

중첩 클래스(Nested Class)란 클래스 내부에 선언한 클래스를 말하는데, 중첩 클래스를 사용하면
두 클래스의 멤버들을 서로 쉽게 접근할 수 있다는 장점과 외부에는 불필요한 관계 클래스를 감춤으로써
코드의 복잡성을 줄일 수 있다.

다음은 중첩 클래스의 코드 형태이다.

    Class ClassName {
        Class NestedClassName {     // 중첩 클래스
            ;
        }
    }

인터페이스도 클래스 내부에 선언할 수 있다. 이런 인터페이스를 중첩 인터페이스라고 한다.
인터페이스를 내부에 선언하는 이유는 해당 클래스와 긴밀한 관계를 맺는 구현 클래스를 만들기 위해서이다.

    class ClassName {
        interface NestedInterfaceName {     // 중첩 인터페이스
            ;
        }
    }

중첩 인터페이스는 주로 UI 프로그래밍에서 이벤트를 처리할 목적으로 많이 활용된다. 
예를 들어 안드로이드에서는 다음과 같이 View 클래스의 클릭 이벤트를 처리하는 구현 클래스를 만들 수 있도록
View 클래스 내부에 OnClickListener라는 중첩 인터페이스를 가지고 있다.

    public class View {
        public interface OnClickListener {
            public void onClick(View v);
        }
    }