<익명 객체의 로컬 변수 사용>
익명 객체 내부에서는 바깥 클래스의 필드나 메소드는 제한 없이 사용할 수 있다.
문제는 메소드의 매개 벼수나 로컬 변수를 익명 객체에서 사용할 때이다.

메소드 내에서 생성된 익명 객체는 메소드 실행이 끝나도 힙 메모리에 존재해서 계속 사용할 수 있다.

매개 변수나 로컬 변수는 메소드 실행이 끝나면 스택 메모리에서 사라지기 때문에 
익명 객체에서 사용할 수 없게 되므로 문제가 발생한다.

이 문제에 대한 해결 방법은 9.3.3 로컬 클래스에서 사용 제한에서 설명한 적이 있다.
로컬 클래스와 익명 클래스와의 차이점은 클래스 이름의 존재 여부만 다를 뿐 동작 방법은 동일하다.


익명 객체 내부에서 메소드의 매개 변수나 로컬 변수를 사용할 경우, 이 변수들은 final 특성을 가져야 한다.
final 키워드 없이 선언해도 좋다. final 선언을 하지 않아도 여전히 값을 수정할 수 없는 final 특성을 갖는다.

컴파일 시 final 키워드가 있다면 메소드 내부에 지역 변수로 복사되지만,
final 키워드가 없다면 익명 클래스의 필드로 복사된다.

    void outMethod(final int arg1, int arg2) {
        final int var = 1;
        int var2 = 2;

        ''인터페이스 변수 = new 인터페이스() {
            void method() {
                int result = arg1 + arg2 + var1 + var2;
            }
        };''
    }

24-28: ->>      인터페이스 변수 = new 인터페이스() {
                   '' int arg2 = 매개값;
                    int var2 = 2;''
                    void method() {
                        ''int arg1 = 매개값;
                        int var1 = 1;''
                        int result = arg1 + arg2 + var1 + var2
                    }
                };

우리는 익명 클래스의 내부 복사 위치에 신경 쓸 필요 없이 익명 객체에서 사용된 매개 변수와 로컬 변수는
모두 final 특성을 갖는다는 것만 알면 된다.
