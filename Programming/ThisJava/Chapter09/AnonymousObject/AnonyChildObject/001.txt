<익명 객체>
익명(Anonymous) 객체는 이름이 없는 객체를 말한다.
익명 객체는 단독으로 생성할 수 없고, 클래스를 상속하거나 인터페이스를 구현해야만 생성할 수 있다.
익명 객체는 필드의 초기값이나 로컬 변수의 초기값, 매개 변수의 매개값으로 주로 대입한다.
UI 이벤트 처리 객체나 스레드 객체를 간편하게 생성할 목적으로 익명 객체가 많이 활용된다.

<익명 자식 객체 생성>
부모 타입으로 필드나 변수를 선언하고, 자식 객체를 초기값으로 대입할 경우를 생각해보자.
우선 부모 클래스를 상속해서 자식 클래스로 선언하고, new 연산자를 이용해서 자식 객체를 생성한 후,
필드나 로컬 변수에 대입하는 것이 기본이다.

    class Child extend Parent { }   ------- 자식 클래스 선언

    class A {
        Parent field = new Child();     ------- 필드에 자식 객체를 대입
        void method() {
            Parent localVar = new Child();      ------ 로컬 변수에 자식 객체를 대입
        }
    }

그러나 자식 클래스가 재사용되지 않고, 오로지 해당 필드와 변수의 초기값으로만 사용할 경우라면
익명 자식 객체를 생성해서 초기값으로 대입하는 것이 좋은 방법이다.
익명 자식 객체를 생성하는 방법은 다음과 같다. 

주의할 점은 하나의 실행문이므로 끝에는 세미콜론(;)을 반드시 붙여야 한다.

    부모클래스 [필드|변수] = new 부모클래스(매개값, ... ) {
        // 필드
        // 메소드
    };

부모 클래스(매개값, ...) {}은 부모 클래스를 상속해서 중괄호 {}와 같이 자식 클래스를 선언하라는 뜻이고,
new 연산자는 이렇게 선언된 자식 클래스를 객체로 생성한다.

부모 클래스(매개값, ...)은 부모 생성자를 호출하는 코드로, 매개값은 부모 생성자의 매개 변수에 맞게 입력하면 된다.
중괄호 {} 내부에는 필드나 메소드를 선언하거나 부모 클래스의 메소드를 재정의(오버라이딩)하는 내용이 온다.

일반 클래스와의 차이점은 생성자를 선언할 수 없다는 것이다. 다음 코드는 필드를 선언할 때 초기값으로
익명 자식 객체를 생성해서 대입한다.

    class A {
        Parent field = new Parent() {
            int childField;
            void childMethod() { }
            @Override
            void parentMethod() { }
        }
    }

다음 코드는 메소드 내에서 로컬 변수를 선언할 때 초기값으로 익명 자식 객체를 생성해서 대입한다.

    class A {
        void method() {
            Parent localVar = new Parent() {
                int childField;
                void childMethod() { }
                @Override
                void parentMethod() { }
            };
        }
    }

메소드의 매개 변수가 부모 타입일 경우 메소드 호출 코드에서 익명 자식 객체를 생성해서 매개값으로
대입할 수도 있다.

    class A {
        void method1(Parent parent) { }

        void method2() {
            method1(
                new Parent() {
                    int childField;
                    void childMethod() { }
                    @Override
                    void parentMethod() { }
                }
            );
        }
    }

익명 자식 객체에 새롭게 정의된 필드와 메소드는 익명 자식 객체 내부에서만 사용되고,
외부에서는 필드와 메소드에 접근할 수 없다. 왜냐하면 익명 자식 객체는 부모 타입 변수에 대입되므로
부모 타입에 선언된 것만 사용할 수 있기 때문이다. 

예를 들어 다음 코드에서 필드 childField와 메소드 childMethod()는 parentMethod() 메소드 내에서 사용이 가능하나,
A 클래스의 필드인 field로는 접근할 수 없다.

    Class A {
        Parent field = new Parent() {
            int childField;
            void childMethod() { }
            @Override
            void parentMethod() {
                childfield = 3;
                childMethod();
            }
        };

        void method() {
            field.childField = 3;
            field.cihldMethod();
            field.parentMethod();
        }
    }