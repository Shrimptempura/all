<익명 구현 객체 생성>
Anonymous Implements Object Create
인터페이스 타입으로 필드나 변수를 선언하고, 구현 객체를 초기값으로 대입하는 경우를 생각해보자.
우선 구현 클래스를 선언하고, new 연산자를 이용해서 구현 객체를 생성한 후, 
필드나 로컬 변수에 대입하는 것이 기본이다.

    class TV Implements RemoteControl { }

    class A {
        RemoteControl field = new TV();     -------- 필드에 구현 객체를 대입
        void method() {
            RemoteControl localVar = new TV();      -------- 로컬 변수에 구현 객체를 대입
        }
    }

그러나 구현 클래스가 재사용되지 않고, 오로지 해당 필드와 변수의 초기값으로만 사용하는 경우라면
익명 구현 객체를 초기값으로 대입하는 것이 좋다.

익명 구현 객체 생성 방법

    인터페이스 [필드|변수] = new 인터페이스() {
        // 인터페이스에 선언된 추상 메소드와 실체 메소드의 선언
        // 필드
        // 메소드
    };

인터페이스() {}는 인터페이스를 구현해서 중괄호 {}와 같이 클래스를 선언하라는 뜻이고,
new 연산자는 이렇게 선언된 클래스를 객체로 생성한다.
중괄호 {}에는 인터페이스에 선언된 모든 추상 메소드들의 실체 메소드를 작성해야 한다.
그렇지 않으면 컴파일 에러가 발생한다.

추가적으로 필드와 메소드를 선언할 수 있지만, 실체 메소드에서만 사용이 가능하고
외부에서는 사용하지 못한다.

다음은 필드를 선언할 때 초기값으로 익명 구현 객체를 생성해서 대입하는 예이다.

    class A {
        RemoteControl field = new RemoteControl() {
            @Override
            void turnOn() { }
        };
    }


다음은 메소드 내에서 로컬 변수를 선언할 때 초기값으로 익명 구현 객체를 생성해서 대입하는 예이다.

    void method() {
        RemoteControl localVar = new RemoteControl() {
            @Override
            void turnOn() { }
        };
    }


메소드의 매개 변수가 인터페이스 타입일 경우, 메소드 호출 코드에서 익명 구현 객체를 생성해서
매개값으로 대입할 수도 있다.

    class A {
        void method1(RemoteControl rc) { }

        void method2() {
            method1(
                new RemoteControl() {
                    @Override
                    void turnOn() { }
                }
            );
        }
    }