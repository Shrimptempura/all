<타입 변환과 다형성>
다형성은 같은 타입이지만 실행 결과가 다양한 객체를 이용할 수 있는 성질을 말한다.
코드 측면에서 보면 다형성은 하나의 타입에 여러 객체를 대입함으로써 다양한 기능을
이용할 수 있도록 해준다.

다형성을 위해 자바는 부모 클래스로 타입 변환을 허용한다.
즉 부모 타입에 모든 자식 객체가 대입될 수 있다. 이것을 이용하면 객체는 부품화가 가능하다.

예를 들어 자동차를 설계할 때, 타이어 클래스 타입을 적용했다면 이 클래스를 상속한
실제 타이어들은 어떤 것이든 상관없이 장착(대입)이 가능하다.

    public class Car {
        Tire t1 = new HankookTire();
        Tire t2 = new KumhoTire();
    }   // Tire = 타이어 타입 필드, new HankookTire() = 자식 타입 객체 필드

타입 변환이란 데이터 타입을 다른 데이터 타입으로 변환하는 행위를 말한다.

클래스 타입도 마찬가지로 타입 변환이 있다. 
클래스 타입의 변환은 상속 관계에 있는 클래스 사이에서 발생한다. 

자식 타입은 부모 타입으로 자동 타입 변환이 가능하다. 
HankookTire와 KumhoTire는 Tire를 상속했기 때문에 Tire 변수에 대입할 수 있다.

<자동 타입 변환(Promotion)>
자동 타입 변환(Promotion)은 프로그램 실행 도중에 자동적으로 타입 변환이 일어나는 것을
말한다. 자동 타입 변환은 다음과 같은 조건에서 일어난다.

    부모클래스 변수 = 자식클래스 타입; (자동 타입 변환)

자동 타입 변환의 개념은 자식은 부모의 특징과 기능을 상속받기 때문에 부모와 동일하게
취급될수 있다는 것이다.

예를 들어 고양이는 동물의 특징과 기능을 상속받았다. 그래서 "고양이는 동물이다"가
성립한다. Animal과 Cat 클래스가 다음과 같이 상속 관계에 있다고 보자

Animal 클래스(부모) 상위 <-(상속) Cat 클래스(자식) 하위
class Animal { ... } <-(상속) class Cat extends Animal { ... }

Cat 클래스로부터 Cat 객체를 생성하고 이것을 Animal 변수에 대입하면
자동 타입 변환이 일어난다.

    Cat cat = new Cat();        // Animal animal = new Cat();도 가능하다
    Animal animal = cat;        //  ;;

cat과 animal 변수는 타입만 다를 뿐, 동일한 Cat 객체를 참조한다.

스택 영역               힙 영역
cat, aniamal --> Cat -->(상속) Animal       // 307p 그림참조

그림에서 animal 변수가 Animal 타입이므로 당연히 부모인 Animal 객체를 참조하는 것이
맞지 않느냐라고 생각할 수도 있지만, 사실은 그렇지 않다.

다음과 같이 cat과 animal 변수를 == 연산해보면 true가 나오는데, 참조 변수의 == 연산은
참조 주소값이 같을 경우 true를 산출하므로 두 변수가 동일한 객체를 참조하고 있다는 뜻이다.
    cat == animal // true

바로 위의 부모가 아니더라도 상속 계층에서 상위 타입이라면 자동 타입 변환이 일어날 수 있다.
D -> B -> A     
E -> C -> A

B b = new B();      =>  A a1 = b; (가능)
C c = new C();          A a2 = c; (가능)
D d = new D();          A a3 = d; (가능)
E e = new E();          A a4 = e; (가능)

                        B b1 = d; (가능)
                        C c1 = e; (가능)

                        B b3 = e; (불가능)
                        C c2 = d; (불가능)

D 객체는 B와 A 타입이므로 자동 타입 변환이 될 수 있고, E 객체는 C와 A 타입이로
자동 타입 변환이 될 수 있다. 

그러나, D 객체는 C 타입으로 변환될 수 없고, 마찬가지로 E 객체는 B 타입으로 변환
될수 없다.

이유는 상속 관계가 아니기 때문이다.