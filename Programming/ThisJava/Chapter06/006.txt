<패키지>
프로젝트를 하다보면 수백개의 클래스를 작성해야 한다. 클래스를 체계적으로 관리하지 않으면
복잡하고 난해한 프로그램이 되어 유지보수가 어렵게 된다.

자바에선 클래스를 체계적으로 관리하기 위해 패키지(package)를 사용한다.

우리가 폴더를 만들어 파일을 저장 하듯, 패키지를 만들어 클래스를 저장 관리한다.
패키지의 물리적인 형태는 파일 시스템의 폴더이다.

패키지는 단순히 파일 시스템의 폴더 기능만 하는 것이 아니라 클래스의 일부분이다.
패키지는 클래스를 유일하게 만들어주는 식별자 역할을 한다.
클래스 이름이 동일하더라도 패키지가 다르면 다른 클래스로 인식한다.
클래스의 전체 이름은 "패키지명+클래스명"인데 패키지가 상.하위로 구분되었다면
도트(.)를 사용해서      
        상위패키지.하위패키지.클래스        로 표현한다.

패키지가 중요한 이유는 클래스만 따로 복사해서 다른 곳으로 이동하면 클래스는
사용 할 수 없기 때문이다. 클래스를 이동할 경우에는 패키지 전체를 이동해야 한다.

<패키지 선언>
패키지는 클래스를 컴파일하는 과정에서 자동적으로 생성되는 폴더이다.
컴파일러는 클래스에 포함되어 있는 패키지 선언을 보고, 파일 시스템의 폴더로 자동
생성시킨다.
    패키지를 선언하는 방법

    package 상위패키지.하위패키지;

    public claa ClassName {...}

패키지 규칙
1) 숫자 시작 x, _,$를 제외한 특수문자 x
2) java로 시작하는 패키지는 자바 표준 API에서만 사용하므로 사용하면 안된다.
3) 모두 소문자로 작성하는 것이 관례이다.

여러 개발 회사가 함께하는 프로젝트나, 대규모 프로젝트, 다른 회사 패키지 이용 개발인 
경우 패키지 이름의 중복 가능성 때문에 흔히 회사의 도메인 이름으로 패키지를 만든다.

도메인은 등록기간에서 유일한 이름이 되도록 검증되었기 때문에, 도메인 이름으로 패키지를
만들면 다른 회사의 패키지와 중복되는 경우가 발생하지 않는다.

도메인 이름으로 패키지를 만들 경우, 도메인 이름 역순으로 패키지 이름을 지어주는데
그 이유는 포괄적인 이름이 상위 패키지가 되도록 하기 위해서이다. 그리고 마지막엔
프로젝트 이름을 붙여주는 것이 관례이다.

com.samsung.projectname
com.hyndai.projectname