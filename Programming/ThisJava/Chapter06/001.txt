객체 지향 프로그래밍
- 소프트웨어를 개발할 때, 부품에 해당하는 객체들을 먼저 만들고, 이것들을 하나씩 조립
  해서 완성된 프로그램을 만드는 기법, 객체 지향 프로그래밍(OOP: Object Oriented Programming)

<객체: Object>
물리적으로 존재하거나 추상적으로 생각할 수 있는 것 중에서 자신의 속성을 가지고 있고
다른 것과 식별 가능한 것을 말한다.
ex) 물리적으로 존재하는 자동차, 자전거, 책.. 추상적인 학과, 강의, 주문

객체는 속성과 동작으로 구성되어 있다.
예로 사람은 이름, 나이 등의 속성과 웃다, 걷다 등 동작

자바는 이 속성과 동작들을 각각 필드(field)와 메소드(method)라 불린다.

현실 세계의 객체를 소프트웨어 객체로 설계하는 것을 객체 모델링(Object Modeling)
객체 모델링
- 현실 세계 객체의 속성과 동작을 추려내어 소프트웨어 객체의 필드와 메소드로 정의하는 과정

객체들은 각각 독리적으로 존재하고, 다른 객체와 서로 상호작용하면서 동작한다.
객체들 사이의 상호작용 수단은 메소드이다.
객체가 다른 객체으 기능을 이용하는 것이 바로 메소드 호출이다.

메소드 호출은 다음과 같다.
    리턴값 = 전자계산기매체.메소드(매개값1, 매개값2, ...);
    객체에 도트(.)연산자를 붙이고 메소드 이름을 기술하면 된다.
    도트 연산자는 객체의 필드와 메소드에 접근할 때 사용한다.

매개값은 메소드를 실행하기 위해 필요한 데이터이다.
예로 10과 20을 주고 더하기 기능을 이용한다 했을 때. 10과 20이 더하기 기능의 매개값이다.
리턴값은 메소드가 실행하고 나서 호출한 곳으로 돌려주는(리턴하는) 값이다.

다음은 자바 코드로 본 메소드 호출이다.
    int result = Calculator.add(10, 20);
    리턴한 값을 int 변수에 저장

<객체관의 관계>
상속 관계는 상위(부모) 객체를 기반으로 하위(자식) 객체를 생성하는 관계를 말한다.
일반적으로 상위 객체는 종류를 의미하고, 하위 객체는 구체적인 사물에 해당한다.

예를 들어 "자동차는 기계의 종류이다"에서 기계(상위)와 자동차(하위)는 상속관계라 볼수 있다.
