<객체 지향 프로그래밍의 특징>
캡슐화(Encapsulation)
    캡슐화란 객체의 필드, 메소드를 하나로 묶고, 실제 구현 내용을 감추는 것을 말한다.
    외부 객체는 내부의 구조를 알지 못하며 객체가 노출해서 제공하는 필드와 메소드만 이용
    가능하다.

필드와 메소드를 캡슐화 하는 이유
- 외부의 잘못된 사용으로 객체가 손상되지 않도록 하기 위해
  자바는 캡슐화된 멤버를 노출시킬 것인지, 숨길 것인지를 결정하기 위해 
  접근 제한자(Access Modifier)를 사용한다.
  접근 제한자는 객체의 필드와 메소드의 사용 범위를 제한함으로써 외부로부터 보호한다.

상속(Inheritance)
- 일반적으로 상속은 부모가 가지고 있는 재산을 자식에게 물려주는 것을 말한다.
  객체 지향 프로그래밍에서도 부모 역할의 상위 객체와 자식 역할의 하위 객체가 있다.
  상위 객체는 자기가 가지고 있는 필드와 메소드를 하위 객체에게 물려주어 하위 객체가
  사용할 수 있도록 해준다.

  효율적이고 개발 시간 절약, 유지 보수 시간 최소화...

다형성(Polymorphism)
- 같은 타입이지만 실행 결과가 다양한 객체를 이용할 수 있는 성질을 말한다.
  하나의 타입에 여러 객체를 대입함으로써 다양한 기능을 이용할 수 있게 해준다.

  자바는 다형성을 위해 부모 클래스 또는 인터페이스의 타입 변환을 허용한다.
  부모 타입에는 모든 자식 객체가 대입될 수 있고, 이터페이스 타입에는 모든 구현 객체가
  대입될 수 있다.

  다형성의 효과로 객체는 부품화가 가능하다.
  ex) 자동차는 타이어 타입으로 한국 타이어와 금호 타이어를 사용하지만
  각 타이어의 성능은 다르게 나온다.

<객체와 클래스>
메모리에서 사용하고 싶은 객체가 있다면 우선 설계도로 해당 객체를 만드는 작업이 필요하다.
자바에서는 설계도가 바로 클래스(class)이다. 클래스에는 객체를 생성하기 위한
필드와 메소드가 정의되어 있다.

클래스로부터 만들어진 객체를 해당 클래스의 인스턴스(instance)라고 한다.
자동차 객체는 자동차 클래스의 인스턴스인 셈이다.

그리고 클래스로부터 객체를 만드는 과정을 인스턴스화라고 한다.
하나의 클래스로부터 여러 개의 인스턴스를 만들 수 있는데, 이것은 동일한
설계도로부터 여러 대의 자동차를 만드는 것과 동일하다.

객체 지향 프로그래밍 개발은 3가지 단계가 있다.
1) 클래스를 설계
2) 설계된 클래스를 가지고 사용할 객체를 생성
3) 생성된 객체를 이용