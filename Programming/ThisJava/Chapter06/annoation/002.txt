<어노테이션 적용 대상>
어노테이션을 적용할 수 있는 대상은 java.lang.annotation.ElementType 열거 상수로
다음과 같이 정의 되어 있다.

(ElementType 열거 상수)                           (적용 대상)
ElementType                                     클래스, 인터페이스, 열거 타입
ANNOTATION_TYPE                                 어노테이션
FIELD                                           필드
CONSTRUCTOR                                     생성자
METHOD                                          메소드
LOCAL_VARIABLE                                  로컬 변수
PACKAGE                                         패키지

어노테이션이 적용될 대상을 지정할 때에는 @Target 어노테이션을 사용한다.
@Target의 기본 엘리먼트인 value는 ElementType 배열의 값으로 가진다.
이것은 어노테이션이 적용될 대상을 복수개로 지정하기 위해서이다.
예를 들어 다음과 같이 어노테이션을 정의할 경우

    @Target({ElementType.TYPE, ElementType.FIELD, ElementType.METHOD})
    public @interface AnotationName{
        ;
    }

다음과 같이 클래스, 필드, 메소드만 어노테이션을 적용할 수 있고 생성자는 적용할 수 없다.

    @annotationName
    public class ClassName {
        @AnnotationName
        private String fieldName;

        // @AnnotationName (x) --> @Target에 CONSTRUCT가 없어 생성자는 적용 못함
        public ClassName() {}

        @AnnotationName
        public void methodName() {}
    }

<어노테이션 유지 정책>
어노테이션 정의 시 한 가지 더 추가해야 할 내용은 사용 용도에 따라 @AnnotationName을
어느 범위까지 유지할 것인지 지정해야 한다. 쉽게 설명하면 소스상에만 유지할 건지,
컴파일된 클래스까지 유지할 건지, 런타임 시에도 유지할 건지를 지정해야 한다.

어노테이션 유지 정책은 java.lang.annotation.RetentionPolicy 열거 상수로 정의되어 있다.

(RetentionPolicy 열거 상수)
SOURCE : 소스상에서만 어노테이션 정보를 유지한다. 소스 코드를 분석할 때만 의미가 있으며
        바이트 코드 파일에는 정보가 남지 않는다.

CLASS : 바이트 코드 파일까지 어노테이션 정보를 유지한다. 하지만 리플렉션을 이용해서
        어노테이션 정보를 얻을 수 없다.

RUNTIME : 바이트 코드 파일까지 어노테이션 정보를 유지하면서 리플렉션을 이용해서
        런타임에 어노테이션 정보를 얻을 수 있다.

리플렉션(Reflection)
- 런타임 시에 클래스의 메타 정보를 얻는 기능을 말한다.
    예를 들어 클래스가 가지고 있는 필드가 무엇인지, 어떤 생성자를 갖고 있는지,
    어떤 메소드를 가지고 있는지, 적용된 어노테이션이 무엇인지 알아내는 것이
    리플렉션이다.

    리플렉션을 이용해서 런타임 시에 어노테이션 정보를 얻을려면 어노테이션 유지 정책을
    RUNTIME으로 성정해야 한다. 어노테이션 유지 정책을 지정할 때에는 @Reflection 
    어노테이션을 사용한다. @Reflection의 기본 엘리먼트인 value는 ReflectionPolicy
    타입이므로 위 세 가지 상수 중 하나를 지정하면 된다. 코드 자동 생성 툴을
    개발하지 않는 이상 우리가 작성하는 어노테이션은 대부분 런타임 시점에 사용하기 위한
    용도로 만들어 진다. 다음은 런타임 유지 정책을 적용한 어노테이션이다.

    @Target({ElementType.TYPE, ElementType.FIELD, ElementType.METHOD})
    @Reflection(ReflectionPolicy.RUNTIME)
    public @interface AnnotationName {
        ;
    }

    