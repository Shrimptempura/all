<참조 변수의 ==, != 연산>
참조 타입 변수의 값은 힙 영역의 객체 주소이므로 결국 주소 값을 비교하는 것이 된다.
동일한 주소 값을 갖고 있다는 것은 동일한 객체를 참조한다는 의미이다.
따라서 동일한 객체를 참조하고 있을 경우 == 연산 결과는 true 이고, !=는 false이다.

ex)
refVar1, refVar2는 서로 '다른' 객체 참조
refVar1 == refVar2 : false
refVar1 != refVar2 : true

refVar2, refVar3 '동일한' 객체 참조
refVar2 == refVar3 : true
refVar2 != refVar3 : false

<null과 NullPointerException>
참조 타입 변수는 힙 영역의 객체를 참조하지 않는다는 뜻으로 null 값을 가질 수 있다.
null도 초기값으로 사용할 수 있기 때문에, null로 초기화된 참조 변수는 스택 영역에 생성된다.

참조 타입 변수가 null 값을 가지는지 확인하려면 다음과 같이 ==, != 연산을 수행하면 된다.
    refVar1 -> 객체1(heap field)     // refVar1은 힙 영역의 객체를 참조
    refVar2 -> null
    ...
        refVar1 == null : false
        refVar1 != null : true
    refVar2는 null 값을 가지므로...
        refVar2 == null : true
        refVar2 != null : false

예외(Exception) : 프로그램 실행 도중에 발생하는 오류
- 참조 변수를 사용하면서 가장 많이 발생하는 예외중 하나인 NullPointerException이 있다.
    이 예외는 참조 타입 변수를 잘못 사용하면 발생한다.
    참조 타입 변수가 null을 가지고 있을 경우, 참조 타입 변수는 사용할 수 없다.
    참조 타입 변수를 사용하는 것은 곧 객체를 사용하는 것을 의미하는데,
    참조할 객체가 없으므로 사용할 수 가 없는 것이다.

(프로그래머의 실수로 null 값을 가지고 있는 참조 타입 변수를 사용해서
NullPointerException가 발생한 예시)
int[] intArray = null;
intArray[0] = 10;   // NullPointerException

    상기 코드에서 intArray는 배열 타입 변수 이므로 참조 타입 변수이다.
    그래서 null로 초기화가 가능하다. 이 상태에서 intArray[0]에 10을 저장할려고 하면
    NullPointerException가 바랭한다.

    이유는 intArray 변수가 참조하는 배열 객체가 없기 때문이다.

ex)
String str = null;
System.out.println("총 문자수 : " + str.length());  // NullPointerException

    String은 클랫 타입이므로 참조 타입이다. 따라서 str 변수도 null로 초기화가 가능하다.
    이 상태에서 String 객체의 length()라는 메소드를 호출하면 NullPointerException가 발생한다.
    이유는 str 변수가 참조하는 String 객체가 없기 때문이다.

프로그램 실행 도중 NullPointerException이 발생하면, 예외가 발생된 곳에서 참조하지 않은
상태로 참조 타입 변수를 사용하고 있음을 알아야 한다.

대처 방법은 이 변수를 추적해서 객체를 참조하도록 수정해야 한다.
