<정규 표현식과 Pattern 클래스>
문자열이 정해져 있는 형식(정규 표현식: Regular Expression)으로 구성되어 있는지 검증해야 하는 경우가 있다.
예를 들어, 이메일, 전화번호를 사용자가 제대로 입력했는지 검증해야 할 때 정구 표현식과 비교한다.
정규 표현식을 작성하는 방법과 문자열을 검증하는 방법을 알아본다.

<정규 표현식 작성 방법>
정규 표현식을 작성하는 방법은 API 도큐먼트에서 java.lang.regex.Pattern 클래스를 찾아
Summary of regular-expression constructs를 참조하면 되는데, 이해하기 쉽지 않다.
간단히 말해서 정규 표현식은 문자 또는 숫자 기호와 반호 기호가 결합된 문자열이다.

다음은 정규 표현식을 작성하는데 기본적인 기호들의 설명이다.

    기호        설명
    []          한개의 문자         [abc]       a, b, c 중 하나의 문자
                                    [^abc]      a, b, c 이외의 하나의 문자
                                    [a-zA-Z]    a~z, A~Z 중 하나의 문자
    \d          한개의 숫자, [0-9]와 동일
    \s          공백
    \w          한 개의 알파벳 또는 한 개의 숫자, [a-zA-Z_0-9]와 동일
    ?           없음 또는 한 개
    *           없음 또는 한 개 이상
    +           한 개 이상
    {n}         정확히 n개
    {n,}        최소한 n개
    {n,m}       n개에서부터 m개까지
    ()          그룹핑


다음은 02-123-1234 또는 010-1234-5678과 같은 전화번호를 위한 정규 표현식이다.

    (02|010)-\d{3,4}-d\{4}

    기호        설명
    (02|010)    02 또는 010
    -           포함
    \d{3,4}     3자리 또는 4자리 숫자
    -           포함
    \d{4}       4자리 숫자

다음은 white@naver.com과 같은 이메일을 위한 정규 표현식이다.

    \w+@\w+\.\w+(\.\w+)?
    
    기호        설명
    \w+         한 개 이상의 알파벳 또는 숫자
    @           @
    \w+         한 개 이상의 알파벳 또는 숫자
    \.          .
    \w+         한 개 이상의 알파벳 또는 숫자
    (\.\w+)?    \.\w+이 없거나 한 번더 올 수 있음

주의할 점은 \.과 .은 다른데 \.은 문자로서의 점(.)을 말하고 .은 모든 문자 중에서 한 개의 문자를 말한다.