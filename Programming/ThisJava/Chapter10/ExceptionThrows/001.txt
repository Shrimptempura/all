<예외 떠넘기기(Exception Throws)>
메소드 내부에서 예외가 발생할 수 있는 코드를 작성할 때 try-catch 블록으로 예외를 처리하는 것이 기본이지만,
경우에 따라서는 메소드를 호출한 곳으로 예외를 떠넘길 수 있다.

이때 사용되는 키워드가 throws이다. throws 키워드는 메소드 선언부 끝에 작성되어 메소드에서 처리하지 않은
예외를 호출한 곳으로 떠넘기는 역할을 한다.
throws 키워드 뒤에는 떠넘길 예외 클래스를 쉼표로 구분해서 나열해주면 된다.

    리턴타입 메소드명(매개변수, ...) throws 예외클래스1, 예외클래스2, ... {
        ;
    }

발생할 수 있는 예외의 종류별로 throws 뒤에 나열하는 것이 일반적이지만, 
다음과 같이 thorws Exception만으로 모든 예외를 간단히 떠넘길 수도 있다.

    리턴타입 메소드명(매개변수, ...) thrwos Exception {
        ;
    }


thorws 키워드가 붙어있는 메소드는 반드시 try 블록 내에서 호출되어야 한다. 
그리고 catch 블록에서 떠넘겨 받은 예외를 처리해야 한다. 다음 코드는 thorws 키워드가 있는 
method2()를 method1()에서 호출하는 방법을 보여준다.

    public void method1() {
        try {
            method2();
        } catch (ClassNotFoundException e) {                        // 호출된 곳에서 예외 처리
            // 예외 처리 코드
            System.out.println("클래스가 존재하지 않습니다.");
        }
    }

    public void method2() throws ClassNotFoundException {           // 호출된 곳에서 예외 처리
        Class clazz = Class.forName("java.lang.String2");
    }


method1()에서도 try-catch 블록으로 예외를 처리하지 않고 throws 키워드로 다시 예외를 떠넘길 수 있다.
그러면 method1()을 호출하는 곳에서 결국 try-catch 블록을 사용해서 예외를 처리해야 한다.

    public void method1() throws ClassNotFoundException {
        method2();
    }


자바 API 도큐먼트를 보면 클래스 생성자오 메소드 선언부에 throws 키워드가 붙어있는 것을 흔히 볼 수 있다.
이러한 생성자와 메소드를 사용하고 싶다면, 반드시 try-catch 블록으로 예외 처리를 해야한다.
아니면 throws를 다시 사용해서 예외를 호출한 곳으로 떠넘겨야 한다.
그렇지 않으면 컴파일 오류가 발생한다.

예를 들어 Class의 forName() 메소드를 자바 API 도큐먼트에서 보면 다음과 같다.

    forName
    public static Class<?> forName(String className)
                            throws ClassNotFoundException

forName() 메소드 선언부 뒤에 throws ClassNotFoundException이 붙어 있기 때문에 forName() 메소드를 호출할 때
try-catch 블록으로 예외를 처리하거나, throws로 예외를 떠넘겨야 한다.