동적 메모리를 할당하는 기본적인 함수 malloc()은 바이트 단위로 메모리를 할당한다.
인수 size는 할당받고 싶은 바이트의 수
size_t는 unsigned int로 정의되어 있다. malloc()은 <stdlib.h>에 정의됨

Syntax : 동적메모리 할당
    int *p;
    p = (int *)malloc(100 * sizeof(int));

p : 동적 메모리의 주소
100 * sizeof(int) : 필요한 바이트의 수

malloc()이 반환하는 반환형은 void*
void 포인터를 반환하는 이유는 malloc() 함수 입장에서는 프로그래머가 할당받은
메모리 블록을 어떤 자료형으로 사용할 지 알 수 없기 때문이다.

int *score;
score = (int *)malloc(100 * sizeof(int));

if (score == NULL) {        // 메모리 올바른지 할당 체크 구문
    ...
}

    malloc()은 메모리가 부족하면 NULL을 반환하므로 항상 반환값이 NULL이 아닌지
    체크해야 한다. 

    malloc()은 효율성을 위하여 동적 메모리를 초기화하지 않는다. 따라서 쓰레기값이
    들어있다고 생각하면 된다.

<동적 메모리 사용>
할당받은 공간은, 포인터가 반환되므로 포인터를 이용하여서 동적 메모리를 사용해야 한다.
따라서 2가지 방법이 있다.

1) * 연산자 방법
*score = 100;       // 동적 배열의 첫번째 정수
*(score + 1) = 200;
*(score + 2) = 300;
...

2) 배열과 같이 취급, [] 연산자 사용
score[0] = 100;     // 동적 배열의 첫번째 정수
score[1] = 200;
score[2] = 300;
...

<동적 메모리의 반납>
시스템에서 동적으로 할당 가능한 메모리는 그 크기가 제한되어 있다.
따라서 할당받은 메모리의 사용이 끝났을 경우에는 반드시 메모리를 다른 프로그램이
사용할 수 있도록 반납해야 한다. free() 사용
free()를 호출시 할당된 메모리를 가리키는 포인터를 인수로 하여 호출해야 한다.

.. 위의 score 주소
free(score);
