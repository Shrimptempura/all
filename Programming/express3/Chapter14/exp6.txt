<const 포인터와 volatile 포인터>
- const
    : 변하지 않음을 나타내는 키워드, const 키워드를 포인터에 붙이면..
      붙이는 위치에 따라서 상당히 다르게 해석된다.

    1) const char *p;
        const -> char : p가 가리키는 내용이 변경되지 않음을 나타낸다.
        그러나 포인터의 내용은 변경이 가능하다.

    2) char *const p;
        *const -> p : 포인터 p가 변경되지 않음을 나타낸다.
        const 키워드가 *연산자 다음에 있으면 포인터 자체가 변경되지 않는다는 것을 의미
        하지만 포인터가 가리키는 값을 변경할 수 있다.

// constpointer.c
#include <stdio.h>

int main(void)
{
    char s[] = "Barking dogs seldom bite";
    char t[] = "A bad workman blames his tools";
    const char *p = s;
    char *const q = s;

    // p[3] = 'a';  p가 가리키는 곳의 내용을 변경할 수 없다.
    p = t;          하지만 p는 변경이 가능하다.

    q[3] = 'a';     q가 가리키는 곳의 내용은 변경 할 수 있다.
    // q = t;       하지만  q는 변경이 불가능하다.

    return 0;
}

volatile 키워드
변수나 포인터 앞에 volatile 키워드가 있는 경우가 있다.
volatile은 주로 동일한 메모리를 여러 개의 프로세스나 스레드가 사용할 때 필요하다.
volatile은 다른 프로세스나 스레드가 값을 항상 변경할 수 있으니 값을 사용할 때마다
다시 메모리에서 읽으라는 것을 의미한다. 어떤 변수가 volatile로 지정되면 컴파일러는
프로그램에 의하여 변수가 접근될 때마다 메모리에서 값을 다시 로드한다. 
따라서 이것은 컴파일러의 최적화를 방해한다. 하지만 불시에 변경되는 값을 
처리하는 경우에는 불가피 하다.

    volatile char *p;
    : p가 가리키는 내용이 수시로 변경되니 사용할 때마다 다시 로드하라는 의미이다.
    