포인터 배열 : 포인터들을 모아서 배열로 만든것, 배열의 원소가 포인터
int *ap[10];    // []연산자가 *연산자보다 우선순위가 높으므로 ap는 먼저 배열이 된다.
어떤 배열? --> int *들의 배열

<정수형 포인터 배열 초기화 기초>
int a = 10, b = 20, c = 30, d = 40, e = 50;
int *api[5] = {&a, &b, &c, &d, &e};

<문자형 포인터 배열>
문자형 포인터 배열은 효율적으로 여러 개의 문자열 저장 가능

- 2차원 배열에 문자열 저장시..
char fname[4][10] = {
    "apple";
    "banana"...
};      --> 짧은 문자열을 저장하는 행에서는 공간이 낭비될 수 있다.

- 문자형 포인터 배열
char *fruits[4] = {
    "apple",
    "banana",...
};

fruits 포인터 배열이 생성되고 초기화 모습

fruits[0]   --> apple\0
fruits[1]   --> blueberry\0
fruits[2]   --> orange\0
fruits[3]   --> melon\0
    포인터 배열의 원소들은 문자열 상수로 초기화된다. 문자열 상수란 "apple"처럼 문자열을
    큰 따옴표로 둘러쌓은 것이다. 컴파일러가 문자열 상수를 만나면 메모리 공간을 할당
    받아서 문자열을 저장한 다음에 문자열이 저장된 주소 값을 반환하게 된다.
    따라서 포인터 배열의 각 원소들은 이 문자열의 주소값으로 초기화된다.

    이런방식으로 문자열 저장시 각각의 문자열의 길이가 달라도 메모리의 낭비 발생 x

<문자열 배열 기초>
#include <stdio.h>

int main(void)
{
    int i, n;
    char *fruits[] = {
        "apple",
        "blueberry",
        "orange",
        "melon"
    };
    n = sizeof(fruits) / sizeof(fruits[0]);
    for (i = 0; i < n; i++)
    {
        printf("%s\n", fruits[i]);
    }

    return 0;
}