<전처리기 지시자>
#define : 매크로 정의           #endif : 조건 처리 문장 종료
#include : 파일 포함            #ifdef : 매크로가 정의되어 있는 경우
#undef : 매크로 정의 해제       #ifndef : 매크로가 정의도이 있지 않은 경우
#if : 조건이 참인 경우          #line : 행 번호 출력
#else : 조건이 거짓일 경우      #pragma : 시스템에 따라 의미가 다름

단순 매크로 --> #define MAX_SIZE 100
1) 기호 상수를 사용해 프로그램의 가독성을 높임
2) 값의 변경이 용이함
        3) 기호 상수를 사용하지 않고 숫자 사용시 일일히 그 위치를 찾아 바꿔야함
        4) ex) #define getchar() getc(stdin) : 도 가능
           ex) #define AND && ...
           ex) #define OF || ...

함수 매크로(function-like marcro)
    : 매크로가 함수처럼 매개변수를 가지는 것
    Syntax : 함수매크로
        #define SQUARE(x) ((x) * (x))
    
    매크로는 두개 이상의 매개 변수를 가질 수 있다.
    #define SUM(x, y) ((x) + (y))
    #define MAX(x, y) ((x) > (y)) ? (x) : (y)

함수 매크로에서는 매개 변수의 자료형을 써주지 않는다. 따라서 어떠한 자료형에 대해서도
적용이 가능하다.
    v = SQUARE(7);
    v = SQUARE(1.23);

변수를 포함한 수식도 매크로의 매개변수가 될 수 있다.
    v = SQUARE(a + b);

    함수 매크로에서는 매개 변수가 기계적으로 대치되기 때문에
    반드시 매크로의 매개 변수들을 괄호로 묶어주어야 한다.

    괄호로 묶지 않은 경우..
    #defiene SQUARE(x) x * x
    v = SQUARE(a + b);
==>
    v = a + b * a + b;      이러한 오류 발생

기타 사항
1) 매크로 정의 할 때 매개 변수는 모두 사용되어야 한다.
    #define HALFOF(y, x) ((X) / 2)      // 오류

2) 매크로 이름과 괄호 사이에 공백이 있으면 안된다.
    #define ADD (x, y) ((x) + (y))      // 오류
    --> ADD와 ( 사이에 공백이 있기 때문에 전처리기는 기호 상수 정의로 생각하고
    ADD라는 문자열을 (x, y) ((x) + (y))로 치환한다.

3) 매크로 작성시 한줄을 넘어가게 되면?
    줄 맨 끝에 '\'을 적어주면 한줄이 연장된다.
    #define PRINT(C) if(debug == 1 && \
                        mode == 1) \
                            printf("%d", x);
