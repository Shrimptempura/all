<전처리 매크로 여러가지>
#ifndef : #ifdef의 반대말. 즉 어떤 매크로가 정의되어 있지 않으면 #ifndef와 #endif 
          사이의 문장이 컴파일 된다. 만약 매크로가 정의되어 있으면 컴파일에서 빠진다.

#undef : 매크로의 정의를 취소한다. 주로 이전에 정의된 매크로를 다시 정의하고 싶을 때
         사용한다. 즉 이전의 정의를 무효화 하고 새로 정의하고 싶을 때 사용한다
    - #define SIZE 100
    ..
      #undef SIZE
      #define SIZE 200

#if : #if 다음에 있는 기호를 검사하여 참으로 계산되면 #if와 #endif사이에 있는
      모든 코드를 컴파일 한다. 조건은 상수 수식이어야 하고 관계 연산자나 논리 연산자는
      사용할 수 있다.
    Syntax : 조건부 컴파일
        #if DEBUG == 1  // 매크로 DEBUG이 값이 1이면 #if와 #endif 사이에 있는
                        // 모든 문장들을 컴파일 한다.
            printf("value = %d\n", value);
        #endif

    #ifdef은 매크로 값에는 상관하지 않지만, #if는 매크로의 값에 따라서 컴파일 여부를
    결정한다. 만약 DEBUG 매크로가 0이면 컴파일 자체가 안된다. 따라서 컴파일이 안되게
    할려면 DEBUG를 1이 아닌 다른값이거나 DEBUG 자체를 정의하지 않으면 된다.
            #define DEBUG 0

매크로는 간단한 사칙 연산 및 논리 연산자도 가능하나..
실수나 문자열과 비교할 수 없다.

defined 연산자를 사용하여 매크로 정의 여부를 알 수 있다.
#if (VERSION > 300 || defined(DELUXE))  // 버전이 300이상이거나 DELUXE 매크로 정의됨

자주 사용하게 되는 것 => #if 0.
#if 0는 어떤 코드 블록을 잠시 주석처리하고 싶을 때 사용한다.
물론 /* */이 있지만 중간에 다른 주석이 있는 경우.. 사용한다.

#if 0   // 여기서부터 시작하여
void test()
/* 여기에 주석이 있다면 전체 주석처리가 쉽지 않음
sub();
}
#endif  // 여기까지 주석처리한다.

만약 주석 처리 했던 블록을 다시 살리려면 간단히 #if 0를 #if 1로 변경하면 된다.