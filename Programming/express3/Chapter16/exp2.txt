<#연산자>
    함수 매크로를 사용하다보면 매크로의 인수를 문자열로 변경하고 싶은 경우가 발생한다.
    예로 "x = 5"와 같이 변수의 이름과 값을 동시에 출력하는 매크로 PRINT()를 작성하고
    싶다. 하지만 다음과 같이 매크로를 작성하고 PRINT(x)로 호출시 실제 출력은 다음과 같다.

#include <stdio.h>
#define PRINT(exp) printf("exp = %d\n", exp);

int main(void)
{
    int x = 5;

    PRINT(x);
    return 0;
}   // 실행 결과 :  exp = 5
원인1)
    전처리기는 큰 따옴표 안의 exp는 치환하지 않는다. 만약 큰 따옴표 안의 exp도 x로
    치환하게 하려면 exp를 큰 따옴표 밖에 위치 시켜야한다.
    
    2)
    전달된 실제 인수인 x를 문자열로 만들어야 한다. 매크로에 전달된 실제 인수를
    문자열로 만들려면 매개 변수 앞에 #를 붙이며 된다.

    #define PRINT(exp) printf(#exp" = %d\n", exp);
    --> 인수를 따옴표 밖에(exp) 두었고, 인수를 문자열로 변환하기 위해 #을 붙임

#은 문자열 변환 연산자(Stringizing Operator)라고 불린다.
매크로 정의에서 매개 변수 앞에 #가 위치하면 매크로 호출에 의하여 전달되는 실제 인수는
큰 따옴표로 감싸지고 문자열로 변환된다
# 연산자는 매개 변수를 가지는 매크로에서만 사용할 수 있다. 

    #exp는 "x"로 치환되고 printf("x"" = %d\n", x); 와 같이 변경되어
    x = 5를 출력한다.

<내장 매크로>
미리 정의되어 있는 매크로, 많이 사용되는 4가지 예제
__DATE__ : 소스가 컴파일된 날짜(월 일 년)로 치환된다.
__TIME__ : 소스가 컴파일된 시간(시:분:초)로 치환된다.
__LINE__ : 소스 파일에서의 현재의 라인 번호로 치환된다.
__FILE__ : 소스 파일 이름으로 치환된다.

ex) __DATE__ : 프로그램이 최신 버전인지 아닌지 구분하는데 도움을 줌
printf("컴파일 날짜 = %s\n", __DATE__);

__LINE__, __FILE__은 주로 디버깅 관한 정보 출력, __LINE__은 정수를 반환 %d 사용
printf("오류 발생 파일 이름 = %s 라인 번호 = %d\n", __FILE__, __LINE__);



