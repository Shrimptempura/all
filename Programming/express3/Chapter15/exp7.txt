<순차 접근과 임의 접근>
지금까지의 파일 입출력 방법은 모두 데이터를 파일의 처음부터 순차적으로 읽거나 기록하는
것이였다. --> 이것을 순차 접근(sequential access)라 한다.
순차 접근은 한번 읽은 데이터를 다시 읽으려면 현재의 파일을 닫고 파일을 다시 열어야 한다.
또한 앞부분을 읽지 않고 중간이나 마지막으로 건너뛸수 없다.

다른 파일 입출력 방법에는 임의 접근(random access)가 있다.
임의 접근은 파일의 어느 위치에서든 읽기와 쓰기가 가능하다.

<임의 접근의 원리>
모든 파일에는 파일 포인터가 존재한다. 파일 포인터는 읽기와 쓰기 동작이 현재 어떤
위치에서 이루어지는 지를 나타낸다.

새 파일이 만들어 지면 파일 포인터의 값은 0이고, 이것은 파일의 시작 부분을 가리킨다.
기존의 파일의 경우, 추가 모드에서 열렸을 경우에는 파일의 끝이 되고,
다른 모드인 경우에는 파일의 시작 부분을 가리킨다.

파일에서 읽거나 쓰기가 수행되면 파일 포인터가 갱신된다. 예로 읽기 모드로 파일을 열고,
100바이트를 읽었다면 파일 포인터의 값이 100이 된다. 다음에 200바이트를 읽었으면
파일 포인터는 300이 된다.

<fseek()>
Syntax : fseek()
    int fseek(FILE *fp, long offset, int origin);
        FILE *fp = FILE 포인터
        long offset = 거리
        int origin = 기존 거리

    SEEK_SET    파일의 시작
    SEEK_CUR    현재 위치
    SEEK_END    파일의 끝

파일 포인터를 파일의 시작 위치 설정시 fseek()도 쓰지만
rewind() 라이브러리 함수도 사용해도 된다.
    rewind(fp);

<ftell()>
Syntax : ftell()
    long ftell(FILE *fp);

위치 표시자의 현재 위치를 알아내려면 ftell()을 사용한다.
ftell()은 현재의 위치 표시자의 값을 long형으로 반환한다. long형 반환 이유는
때에 따라 파일이 매우 클 수있고, 그런 경우에는 위치 표시자의 값이 long형으로만
표시 가능하기 때문이다.
    만약 오류시 -1L을 반환한다.

<foef>
Syntax : foef()
    int feof(FILE *fp);

파일의 끝을 알아내는 함수이다. feof()는 현재 위치가 파일의 끝인지를 알려준다.
이 함수가 쓰는 이유는 이진파일인 경우 '-1'이 파일의 끝을 알려주지 않기 때문이다.
-1값도 데이터일 수도 있는 것이다.

