<파일 열기>
Syntax : 파일열기
    FILE *fp;
    fp = fopen("test.txt", "w");

첫번째 매개변수인 name은 파일의 이름을 나타내는 문자열이다. 큰 따음표로 둘러싸인 
문자열 상수로 직접 입력할 수도 있고, 배열에 담아서 전달할 수 도 있다.

두번째 매개변수인 mode는 파일을 여는 모드를 의미한다.
    읽기모드 : r,   쓰기모드 : w,   추가모드 : a
|
|
r : 읽기모드로 파일을 연다. 만약 파일이 존재하지 않으면 오류가 발생한다.
w : 쓰기모드로 새로운 파일을 생성한다. 파일이 이미 존재하면 기존의 내용이 지워진다.
a : 추가모드로 파일을 연다. 만약 기존의 파일이 있다면 데이터가 파일의 끝에 추가된다.
    파일이 없으면 새로운 파일을 만든다.

r+ : 읽기 모드로 파일을 연다. 쓰기모드로 전환할 수 있다. 반드시 파일이 존재해야 한다.
w+ : 쓰기 모드로 새로운 파일을 생성한다. 읽기 모드로 전환할 수 있다. 파일이 이미 존재
     하면 기존의 내용이 지워진다.
a+ : 추가 모드로 파일을 연다. 읽기 모드로 전환할 수 있다. 데이터를 추가하면 EOF 마커를
     추가된 데이터의 뒤로 이동한다. 파일이 없으면 새로운 파일을 만든다.

"t" 나 "b"를 붙이지 않으면 자동으로 텍스트 파일로 간주한다.
"a" 나 "a+" 모드는 추가모드이여, 추가모드로 파일이 열리면, 모든 쓰기 동작은
파일의 끝에서 일어난다. 따라서 파일 안에 있는 기존 데이터는 절대 사라지지 않는다.

"r+", "w+", "a+" 파일 모드가 지정되면 읽고쓰기가 모두 가능하다. -> 수정 모드
읽기 모드에서 쓰기모드나 그 반대인 경우 전환시 반드시 fflush(), fsetpos(), fseek(),
rewind() 중 하나를 호출하여야 한다.

<파일 닫기>     fclose -> stdio.h에 정의됨
Syntax : 파일 닫기
    fclose(fp); 
    : fp -> FILE 포인터

성공적으로 파일 닫을시 0 반환, 실패한 경우 -1 반환된다.

// file_open.c
#include <stdio.h>
{
    FILE *fp = NULL;    // FILE을 가리키는 포인터 fp 선언
    fp = fopen("sample.txt", "w");

    if (fp == NULL)     // fopen()의 반환값이 널이 아닌지 검사식
        printf("파일 열기 실패\n");
    else
        printf("파일 열기 성공\n");
    
    fclose(cp);

    return 0;
}

<파일 삭제>
    파일을 삭제할 때도 라이브러리 함수를 사용하면 된다. -> remove() -> stdio.h에 정의됨
    성공적 삭제 0 반환, 실패한 경우 -1 반환

int main(void)
{
    if (remove("sample.txt") == -1)
        printf("sample을 삭제 할 수 없습니다.\n");
    else
        printf("sample을 삭제 하였습니다.\n");

    return 0;
}

int foef(FILE *stream) : 파일의 끝이 도달되면 true을 반환한다.
int rename(const char *oldname, const char *newname) : 파일의 이름을 변경한다.
FILE *tmpfile() : 임시 파일을 생성하여 반환한다.
int ferror(FILE *stream) : 스트림의 오류 상태를 반환한다. 오류가 발생시 true가 반환됨

// 임시 파일 생성 방법중 하나.. tmpfile()
FILE *fp;
fp = tmpfile();
...
fclose(fp);