<format() 메소드와 플레이스홀더의 인덱스>
>>> 'I like {1} and {0}'.format('Python', 'Java')
'I like Java and Python'
    -> 순서 0, 1

>>> '{0}, {0}, {0}! Python'.format('Hello')
'Hello, Hello, Hello! Python'

'{0}, {1}, {0}, {0}'.foramt('A', 'B')
'A, B, A, B'


<format을 이용한 숫자의 폭>
print('{0:3d} {1:4d} {2:5d}'.format(i, i * i, i * i * i))
-> 3, 4, 5의 필드폭 오른정렬


<소수점 아래 자리수를 조절하는 실수 포매팅>
print('afaff = {0:10.2f}'.format(3.1412331))
--> 0번째 위치에
--> 총 10자리
--> 2f : 소수점 아래 2칸

<소수점 아래 자리수만 지정하기> --> 전체 칸의 크기를 지정하지 않고 소수점 아래
                                    자리수만 지정   <-> 10.2f (10자리중 2소수점)
print('1/3은 {:3f}'.format(1/3))    # 소수점 아래 출력만 지정
>>> 1/3은 0.333


a = float(input())
print(format(a, ".2f"))     --> 이것도 가능



<1000단위 쉼표 출력방법>
>>> print('{:,}'.format(1234567890))
1,234,567,890


플레이스홀더에 출력을 할 때는 key = value와 같이 키와 값을 인자로 넘겨주고 이 키를
이용한 출력도 가능하다.

{0}, {1}와 같이 -> 35.17N, 129.07E 의미가 모호한 경우
직접 키 이름을 주고 값을 할당하면 오류를 줄일수 있음

print('위도 : {0}, 경도 : {1}'.format('35.17N', '129.07E))
>>> 위도 : 35.17N, 경도 : 129.07E

print('위도 : {lat}, 경도 : {long}'.format(lat = '35.17N', long = '129.07E))
                                            // lat, long 위치 바꿔도 
                                            값지정이라 괜찮음
