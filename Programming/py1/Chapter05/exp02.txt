<리스트와 sort() 메소드>
list1 = [20, 10, 40, 50, 30]
list1.sort()
list1       // 정렬됨

list1.sort(reverse = True)      // 내림차순 정렬
list1
[50, 40, 30, 20, 10]

index(x) : 원소 x를 이용하여 위치를 찾는 기능을 한다.
append(x)
count(x) : 리스트 내에서 x 원소의 개수를 반환한다.
extend([x1, x2]) : [x1, x2] 리스트를 리스트에 삽입한다.
insert(index, x) : 원하는 index 위치에 x를 추가한다.
remove(x) : x 원소를 리스트에서 삭제한다.
pop(index) : index 위치의 원소를 삭제한 후 반환한다. 이때 index는 생략될 수 있으며,
            이 경우 리스트의 마지막 원소를 삭제하고 이를 반환한다.
sort() : 값을 오름차순 순서 정렬, reverse = Ture이면 내림차순 정렬
reverse() : 리스트를 원래 원소들의 역순으로 만들어 준다.


b_list = ['a', 'b', 'a', 'd', 'a']
b_list.count(a)     // 'a'가 몇 개 있는지 그 개수를 반환
--> 3

list1 = ['a', 'b', 'c']
list2 = [1, 2, 3]
list1.extend(list2)
list1           ['a', 'b', 'c', 1, 2, 3]

list1.extend('d')
['a', 'b', 'c', 1, 2, 3, 'd']

append를 쓰면 리스트안에 리스트가 추가됨
extend를 쓰면 리스트안에 리스트의 원소가 추가됨



list1 = ['a', 'b', 'c', 'd']
list1.pop()     // list1의 마지막 원소 'd'를 삭제하고 반환
'd'

list1.pop(1)        // list1의 두 번째 원소(1) 'b'를 삭제하고 반환
'b'

<두 리스트를 합치는 연산자 +>
두 리스트 사이에는 더하기 연산자를 사용할 수 있다.
그러나 빼기 곱하기 나누기는 사용할 수 없다.

list1 = [11, 22, 33]
list2 = [44, 55]

print(list1 + list2)        // 11, 22, 33, 44, 55

<*연산자 리스트 활용>
list1 = [1, 2, 3, 4]
list1 * 2       [1, 2, 3, 4, 1, 2, 3, 4]

하지만..
list1 = [1, 2, 3, 4]        list2 = [10, 20, 30, 40]
list1 * list2 와 같은 곱셈은 문법오류 발생


<리스트에서의 >,< 연산자 이용 비교>
list1 = [1, 2, 3, 4]
list2 = [2, 3, 3, 4]
list1 > list2   // False
list1 < list2   // True

>,<연산자는 하나하나 순서대로 비교하여 먼저 큰값이 리스트가 더 큰값이 된다.
문자열인 경우 사전적 순서(lexicographic order)를 비교

