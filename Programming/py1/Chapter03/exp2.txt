range()는 반복가능 객체를 반환한다.
반복가능 객체는 리스트처럼 sum() 함수를 사용할 수 있다.

    print('1에서 100까지의 합 :', sum(range(1, 101)))
1에서 100까지의 합 : 5050

st = 'hello'
list(st)
['H', 'e', 'l', 'l', 'o']

<소수구하기>
소수의 구조
    1과 자신 이외의 약수를 가지지 않는 수
    ex) 어떤 수 n이 2부터 n-1 사이에 있는 특정한 수로 나누어지면 소수가 아니다!

    어떤 수 n이 num으로 나누어지는가는 n % num == 0을 num이 2부터 n - 1에
    이를 때까지 반복적으로 검사하면 된다

pseudo code)
    n = int(input('수를 입력하세요 : ))
    is_prime = True
    for num in range(2, n):
        if (n % num == 0):
            is_prime = False
    
    print(n, 'is prime :' is_prime)

<while문과 for문 비교>
while문은 수행횟수를 정확하게 잘 모르지만, 수행의 조건이 명확한 경우에 더 적합하다.

반면 리스트나 튜플, 세트와 같은 미리 설계된 자료구조의 원소를 순회하는 경우나
루프의 반복 횟수가 명확한 경우에는 for문이 적합하다.


<break와 continue>
반복문 실행 중에 반복 실행을 종료하고 싶을 대는 break
반복문 루프내의 나머지 실행부를 건너뛰고 계속해서 반복 루플를 실행하고 싶을때 continue

즉 continue는 반복 실행을 완전히 종료하지는 않는다.