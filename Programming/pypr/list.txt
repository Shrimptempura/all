a = []      리스트
a = list()      비어있는 리스트

a = [1, 2, 3, 4]
a[0] = 1
a[-1] = 4       

인덱스 -1은 마지막 인덱스를 가리킴


a = [1, 2, ['a', 'b', 'c']]
그렇다면 여기에서 리스트 a에 포함된 ['a', 'b', 'c'] 리스트에서 'a' 값을
 인덱싱을 사용해 끄집어낼 수 있는 방법은 없을까? 다음 예를 보자.

>>> a[-1][0]
'a'
>>> a[-1][1]
'b'
>>> a[-1][2]
'c'


조금 복잡하지만 다음 예를 따라 해 보자.

>>> a = [1, 2, ['a', 'b', ['Life', 'is']]]
리스트 a 안에 ['a', 'b', ['Life', 'is']] 리스트가 포함되어 있고, 
그 리스트 안에 다시 ['Life', 'is'] 리스트가 포함되어 있다. 삼중 구조의 리스트이다.

이 경우 'Life' 문자열만 끄집어내려면 다음과 같이 해야 한다.

>>> a[2][2][0]
'Life'
위 예는 리스트 a의 세 번째 요소인 리스트 ['a', 'b', ['Life', 'is']]에서 
세 번째 요소인 리스트 ['Life', 'is']의 첫 번째 요소를 나타낸다.

이렇듯 리스트를 삼중으로 중첩해서 쓰면 혼란스럽기 때문에 자주 사용하지는 않지만 
알아두는 것이 좋다.

---------------------------


<리스트의 슬라이싱>
>>> a = [1, 2, 3, 4, 5]
>>> a[0:2]
[1, 2]

>>> a = "12345"
>>> a[0:2]
'12'

>>> a = [1, 2, 3, 4, 5]
>>> b = a[:2]               // [:2] -> ':'은 0
>>> c = a[2:]               // [2:]  -> [2:0]에 0은 인덱스 끝까지
>>> b
[1, 2]
>>> c
[3, 4, 5]

----------------------------

리스트 요소 끄집어내기(pop)
pop()은 리스트의 맨 마지막 요소를 돌려주고 그 요소는 삭제한다.

>>> a = [1,2,3]
>>> a.pop()
3
>>> a
[1, 2]

pop()은 맨뒤 인덱스부터 꺼낸다.         pop() 이거만

리스트 요소 끄집어내기(pop)
pop()은 리스트의 맨 마지막 요소를 돌려주고 그 요소는 삭제한다.

>>> a = [1,2,3]
>>> a.pop()
3
>>> a
[1, 2]



-------------------------------
튜플(tuple)은 몇 가지 점을 제외하곤 리스트와 거의 비슷하며 리스트와 다른 점은 
다음과 같다.

리스트는 [ ]으로 둘러싸지만 튜플은 ( )으로 둘러싼다.
리스트는 그 값의 생성, 삭제, 수정이 가능하지만 튜플은 그 값을 바꿀 수 없다.

>>> t1 = ()
>>> t2 = (1,)
>>> t3 = (1, 2, 3)
>>> t4 = 1, 2, 3
>>> t5 = ('a', 'b', ('ab', 'cd'))

리스트와 모습은 거의 비슷하지만 튜플에서는 리스트와 다른 2가지 차이점을 찾아볼 수 있다.
t2 = (1,)처럼 단지 1개의 요소만을 가질 때는 요소 뒤에 콤마(,)를 
반드시 붙여야 한다는 것과 t4 = 1, 2, 3처럼 괄호( )를 생략해도 무방하다는 점이다.



얼핏 보면 튜플과 리스트는 비슷한 역할을 하지만 프로그래밍을 할 때 튜플과 리스트는 
구별해서 사용하는 것이 유리하다. 튜플과 리스트의 가장 큰 차이는 값을 변화시킬 수 
있는가 여부이다. 즉 리스트의 항목 값은 변화가 가능하고 튜플의 항목 값은 변화가 
불가능하다. 따라서 프로그램이 실행되는 동안 그 값이 항상 변하지 않기를 바란다거나 
값이 바뀔까 걱정하고 싶지 않다면 주저하지 말고 튜플을 사용해야 한다. 
이와는 반대로 수시로 그 값을 변화시켜야할 경우라면 리스트를 사용해야 한다. 
실제 프로그램에서는 값이 변경되는 형태의 변수가 훨씬 많기 때문에 평균적으로 
튜플보다는 리스트를 더 많이 사용한다.